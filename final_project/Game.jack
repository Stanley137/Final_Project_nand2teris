class Game {
    // attributes and methods
    field Jet jet; // our flight
    field Map map; // map(building„ÄÅenemy)
    field Enemy enemy;
    field Array enemys;
    field int num_enemy;
    field int current_enemy;
    field int init_hp;
    constructor Game new(){
        return this;
    }
    method void draw_P(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, -1);
        do Memory.poke(memAddress +32, -1);
        do Memory.poke(memAddress +64, -1);
        do Memory.poke(memAddress +96, -1);
        do Memory.poke(memAddress +128, -1);
        do Memory.poke(memAddress +160, 63);
        do Memory.poke(memAddress +192, 63);
        do Memory.poke(memAddress +224, 63);
        do Memory.poke(memAddress +256, 63);
        do Memory.poke(memAddress +288, 63);
        do Memory.poke(memAddress +320, 63);
        do Memory.poke(memAddress +352, 63);
        do Memory.poke(memAddress +384, 63);
        do Memory.poke(memAddress +416, 63);
        do Memory.poke(memAddress +448, -1);
        do Memory.poke(memAddress +480, -1);
        do Memory.poke(memAddress +512, -1);
        do Memory.poke(memAddress +544, -1);
        do Memory.poke(memAddress +576, -1);
        do Memory.poke(memAddress +608, 63);
        do Memory.poke(memAddress +640, 63);
        do Memory.poke(memAddress +672, 63);
        do Memory.poke(memAddress +704, 63);
        do Memory.poke(memAddress +736, 63);
        do Memory.poke(memAddress +768, 63);
        do Memory.poke(memAddress +800, 63);
        do Memory.poke(memAddress +832, 63);
        do Memory.poke(memAddress +864, 63);
        do Memory.poke(memAddress +896, 63);
        do Memory.poke(memAddress +928, 63);
        do Memory.poke(memAddress +960, 63);
        do Memory.poke(memAddress +992, 63);
        // column 1
        do Memory.poke(memAddress +1, -1);
        do Memory.poke(memAddress +33, -1);
        do Memory.poke(memAddress +65, -1);
        do Memory.poke(memAddress +97, -1);
        do Memory.poke(memAddress +129, -1);
        do Memory.poke(memAddress +161, -1024);
        do Memory.poke(memAddress +193, -1024);
        do Memory.poke(memAddress +225, -1024);
        do Memory.poke(memAddress +257, -1024);
        do Memory.poke(memAddress +289, -1024);
        do Memory.poke(memAddress +321, -1024);
        do Memory.poke(memAddress +353, -1024);
        do Memory.poke(memAddress +385, -1024);
        do Memory.poke(memAddress +417, -1024);
        do Memory.poke(memAddress +449, -1);
        do Memory.poke(memAddress +481, -1);
        do Memory.poke(memAddress +513, -1);
        do Memory.poke(memAddress +545, -1);
        do Memory.poke(memAddress +577, -1);
        return;
    }
    method void draw_I(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, -1);
        do Memory.poke(memAddress +32, -1);
        do Memory.poke(memAddress +64, -1);
        do Memory.poke(memAddress +96, -1);
        do Memory.poke(memAddress +128, -1);
        do Memory.poke(memAddress +160, -4096);
        do Memory.poke(memAddress +192, -4096);
        do Memory.poke(memAddress +224, -4096);
        do Memory.poke(memAddress +256, -4096);
        do Memory.poke(memAddress +288, -4096);
        do Memory.poke(memAddress +320, -4096);
        do Memory.poke(memAddress +352, -4096);
        do Memory.poke(memAddress +384, -4096);
        do Memory.poke(memAddress +416, -4096);
        do Memory.poke(memAddress +448, -4096);
        do Memory.poke(memAddress +480, -4096);
        do Memory.poke(memAddress +512, -4096);
        do Memory.poke(memAddress +544, -4096);
        do Memory.poke(memAddress +576, -4096);
        do Memory.poke(memAddress +608, -4096);
        do Memory.poke(memAddress +640, -4096);
        do Memory.poke(memAddress +672, -4096);
        do Memory.poke(memAddress +704, -4096);
        do Memory.poke(memAddress +736, -4096);
        do Memory.poke(memAddress +768, -4096);
        do Memory.poke(memAddress +800, -4096);
        do Memory.poke(memAddress +832, -4096);
        do Memory.poke(memAddress +864, -1);
        do Memory.poke(memAddress +896, -1);
        do Memory.poke(memAddress +928, -1);
        do Memory.poke(memAddress +960, -1);
        do Memory.poke(memAddress +992, -1);
        // column 1
        do Memory.poke(memAddress +1, -1);
        do Memory.poke(memAddress +33, -1);
        do Memory.poke(memAddress +65, -1);
        do Memory.poke(memAddress +97, -1);
        do Memory.poke(memAddress +129, -1);
        do Memory.poke(memAddress +161, 15);
        do Memory.poke(memAddress +193, 15);
        do Memory.poke(memAddress +225, 15);
        do Memory.poke(memAddress +257, 15);
        do Memory.poke(memAddress +289, 15);
        do Memory.poke(memAddress +321, 15);
        do Memory.poke(memAddress +353, 15);
        do Memory.poke(memAddress +385, 15);
        do Memory.poke(memAddress +417, 15);
        do Memory.poke(memAddress +449, 15);
        do Memory.poke(memAddress +481, 15);
        do Memory.poke(memAddress +513, 15);
        do Memory.poke(memAddress +545, 15);
        do Memory.poke(memAddress +577, 15);
        do Memory.poke(memAddress +609, 15);
        do Memory.poke(memAddress +641, 15);
        do Memory.poke(memAddress +673, 15);
        do Memory.poke(memAddress +705, 15);
        do Memory.poke(memAddress +737, 15);
        do Memory.poke(memAddress +769, 15);
        do Memory.poke(memAddress +801, 15);
        do Memory.poke(memAddress +833, 15);
        do Memory.poke(memAddress +865, -1);
        do Memory.poke(memAddress +897, -1);
        do Memory.poke(memAddress +929, -1);
        do Memory.poke(memAddress +961, -1);
        do Memory.poke(memAddress +993, -1);
        return;
    }
    method void draw_E(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, -1);
        do Memory.poke(memAddress +32, -1);
        do Memory.poke(memAddress +64, -1);
        do Memory.poke(memAddress +96, -1);
        do Memory.poke(memAddress +128, 31);
        do Memory.poke(memAddress +160, 31);
        do Memory.poke(memAddress +192, 31);
        do Memory.poke(memAddress +224, 31);
        do Memory.poke(memAddress +256, 31);
        do Memory.poke(memAddress +288, 31);
        do Memory.poke(memAddress +320, 31);
        do Memory.poke(memAddress +352, 31);
        do Memory.poke(memAddress +384, 31);
        do Memory.poke(memAddress +416, -1);
        do Memory.poke(memAddress +448, -1);
        do Memory.poke(memAddress +480, -1);
        do Memory.poke(memAddress +512, -1);
        do Memory.poke(memAddress +544, -1);
        do Memory.poke(memAddress +576, 31);
        do Memory.poke(memAddress +608, 31);
        do Memory.poke(memAddress +640, 31);
        do Memory.poke(memAddress +672, 31);
        do Memory.poke(memAddress +704, 31);
        do Memory.poke(memAddress +736, 31);
        do Memory.poke(memAddress +768, 31);
        do Memory.poke(memAddress +800, 31);
        do Memory.poke(memAddress +832, 31);
        do Memory.poke(memAddress +864, -1);
        do Memory.poke(memAddress +896, -1);
        do Memory.poke(memAddress +928, -1);
        do Memory.poke(memAddress +960, -1);
        do Memory.poke(memAddress +992, -1);
        // column 1
        do Memory.poke(memAddress +1, -1);
        do Memory.poke(memAddress +33, -1);
        do Memory.poke(memAddress +65, -1);
        do Memory.poke(memAddress +97, -1);
        do Memory.poke(memAddress +417, -1);
        do Memory.poke(memAddress +449, -1);
        do Memory.poke(memAddress +481, -1);
        do Memory.poke(memAddress +513, -1);
        do Memory.poke(memAddress +545, -1);
        do Memory.poke(memAddress +865, -1);
        do Memory.poke(memAddress +897, -1);
        do Memory.poke(memAddress +929, -1);
        do Memory.poke(memAddress +961, -1);
        do Memory.poke(memAddress +993, -1);
        return;
    }
    method void draw_X(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 15);
        do Memory.poke(memAddress +32, 15);
        do Memory.poke(memAddress +64, 31);
        do Memory.poke(memAddress +96, 63);
        do Memory.poke(memAddress +128, 126);
        do Memory.poke(memAddress +160, 252);
        do Memory.poke(memAddress +192, 504);
        do Memory.poke(memAddress +224, 1008);
        do Memory.poke(memAddress +256, 2016);
        do Memory.poke(memAddress +288, 4032);
        do Memory.poke(memAddress +320, 8064);
        do Memory.poke(memAddress +352, 16128);
        do Memory.poke(memAddress +384, 32256);
        do Memory.poke(memAddress +416, -1024);
        do Memory.poke(memAddress +448, -2048);
        do Memory.poke(memAddress +480, -4096);
        do Memory.poke(memAddress +512, -4096);
        do Memory.poke(memAddress +544, -2048);
        do Memory.poke(memAddress +576, -1024);
        do Memory.poke(memAddress +608, -512);
        do Memory.poke(memAddress +640, 32512);
        do Memory.poke(memAddress +672, 16256);
        do Memory.poke(memAddress +704, 8128);
        do Memory.poke(memAddress +736, 8160);
        do Memory.poke(memAddress +768, 4080);
        do Memory.poke(memAddress +800, 1016);
        do Memory.poke(memAddress +832, 508);
        do Memory.poke(memAddress +864, 254);
        do Memory.poke(memAddress +896, 63);
        do Memory.poke(memAddress +928, 63);
        do Memory.poke(memAddress +960, 31);
        do Memory.poke(memAddress +992, 15);
        // column 1
        do Memory.poke(memAddress +1, -4096);
        do Memory.poke(memAddress +33, -2048);
        do Memory.poke(memAddress +65, -1024);
        do Memory.poke(memAddress +97, -512);
        do Memory.poke(memAddress +129, -256);
        do Memory.poke(memAddress +161, 16256);
        do Memory.poke(memAddress +193, 8128);
        do Memory.poke(memAddress +225, 4064);
        do Memory.poke(memAddress +257, 2032);
        do Memory.poke(memAddress +289, 1016);
        do Memory.poke(memAddress +321, 508);
        do Memory.poke(memAddress +353, 254);
        do Memory.poke(memAddress +385, 127);
        do Memory.poke(memAddress +417, 63);
        do Memory.poke(memAddress +449, 31);
        do Memory.poke(memAddress +481, 15);
        do Memory.poke(memAddress +513, 7);
        do Memory.poke(memAddress +545, 15);
        do Memory.poke(memAddress +577, 31);
        do Memory.poke(memAddress +609, 63);
        do Memory.poke(memAddress +641, 127);
        do Memory.poke(memAddress +673, 254);
        do Memory.poke(memAddress +705, 508);
        do Memory.poke(memAddress +737, 1016);
        do Memory.poke(memAddress +769, 2032);
        do Memory.poke(memAddress +801, 4064);
        do Memory.poke(memAddress +833, 8064);
        do Memory.poke(memAddress +865, 16128);
        do Memory.poke(memAddress +897, 15872);
        do Memory.poke(memAddress +929, 31744);
        do Memory.poke(memAddress +961, -1024);
        do Memory.poke(memAddress +993, -2048);
        return;
    }
    method void draw_L(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 63);
        do Memory.poke(memAddress +32, 63);
        do Memory.poke(memAddress +64, 63);
        do Memory.poke(memAddress +96, 63);
        do Memory.poke(memAddress +128, 63);
        do Memory.poke(memAddress +160, 63);
        do Memory.poke(memAddress +192, 63);
        do Memory.poke(memAddress +224, 63);
        do Memory.poke(memAddress +256, 63);
        do Memory.poke(memAddress +288, 63);
        do Memory.poke(memAddress +320, 63);
        do Memory.poke(memAddress +352, 63);
        do Memory.poke(memAddress +384, 63);
        do Memory.poke(memAddress +416, 63);
        do Memory.poke(memAddress +448, 63);
        do Memory.poke(memAddress +480, 63);
        do Memory.poke(memAddress +512, 63);
        do Memory.poke(memAddress +544, 63);
        do Memory.poke(memAddress +576, 63);
        do Memory.poke(memAddress +608, 63);
        do Memory.poke(memAddress +640, 63);
        do Memory.poke(memAddress +672, 63);
        do Memory.poke(memAddress +704, 63);
        do Memory.poke(memAddress +736, 63);
        do Memory.poke(memAddress +768, 63);
        do Memory.poke(memAddress +800, 63);
        do Memory.poke(memAddress +832, -1);
        do Memory.poke(memAddress +864, -1);
        do Memory.poke(memAddress +896, -1);
        do Memory.poke(memAddress +928, -1);
        do Memory.poke(memAddress +960, -1);
        do Memory.poke(memAddress +992, -1);
        // column 1
        do Memory.poke(memAddress +833, -1);
        do Memory.poke(memAddress +865, -1);
        do Memory.poke(memAddress +897, -1);
        do Memory.poke(memAddress +929, -1);
        do Memory.poke(memAddress +961, -1);
        do Memory.poke(memAddress +993, -1);
        return;
    }
    method void draw_W(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 3);
        do Memory.poke(memAddress +32, 7);
        do Memory.poke(memAddress +64, 7);
        do Memory.poke(memAddress +96, 15);
        do Memory.poke(memAddress +128, -32753);
        do Memory.poke(memAddress +160, -16353);
        do Memory.poke(memAddress +192, -8161);
        do Memory.poke(memAddress +224, -8161);
        do Memory.poke(memAddress +256, -8161);
        do Memory.poke(memAddress +288, -4065);
        do Memory.poke(memAddress +320, -4033);
        do Memory.poke(memAddress +352, -4034);
        do Memory.poke(memAddress +384, -1986);
        do Memory.poke(memAddress +416, -1922);
        do Memory.poke(memAddress +448, -900);
        do Memory.poke(memAddress +480, -900);
        do Memory.poke(memAddress +512, 31868);
        do Memory.poke(memAddress +544, 31864);
        do Memory.poke(memAddress +576, 32248);
        do Memory.poke(memAddress +608, 32760);
        do Memory.poke(memAddress +640, 16368);
        do Memory.poke(memAddress +672, 16368);
        do Memory.poke(memAddress +704, 8176);
        do Memory.poke(memAddress +736, 8176);
        do Memory.poke(memAddress +768, 4064);
        do Memory.poke(memAddress +800, 4064);
        do Memory.poke(memAddress +832, 4032);
        do Memory.poke(memAddress +864, 1984);
        do Memory.poke(memAddress +896, 1920);
        do Memory.poke(memAddress +928, 1920);
        do Memory.poke(memAddress +960, 896);
        do Memory.poke(memAddress +992, 768);
        // column 1
        do Memory.poke(memAddress +1, -8192);
        do Memory.poke(memAddress +33, -8192);
        do Memory.poke(memAddress +65, -4096);
        do Memory.poke(memAddress +97, -4096);
        do Memory.poke(memAddress +129, -2047);
        do Memory.poke(memAddress +161, -2041);
        do Memory.poke(memAddress +193, -2041);
        do Memory.poke(memAddress +225, -2033);
        do Memory.poke(memAddress +257, -2033);
        do Memory.poke(memAddress +289, -2033);
        do Memory.poke(memAddress +321, -2017);
        do Memory.poke(memAddress +353, -993);
        do Memory.poke(memAddress +385, -961);
        do Memory.poke(memAddress +417, 31807);
        do Memory.poke(memAddress +449, 31807);
        do Memory.poke(memAddress +481, 31870);
        do Memory.poke(memAddress +513, 31998);
        do Memory.poke(memAddress +545, 32510);
        do Memory.poke(memAddress +577, 16124);
        do Memory.poke(memAddress +609, 16380);
        do Memory.poke(memAddress +641, 8184);
        do Memory.poke(memAddress +673, 8184);
        do Memory.poke(memAddress +705, 4080);
        do Memory.poke(memAddress +737, 4080);
        do Memory.poke(memAddress +769, 4064);
        do Memory.poke(memAddress +801, 4064);
        do Memory.poke(memAddress +833, 2016);
        do Memory.poke(memAddress +865, 2016);
        do Memory.poke(memAddress +897, 2016);
        do Memory.poke(memAddress +929, 960);
        do Memory.poke(memAddress +961, 448);
        do Memory.poke(memAddress +993, 384);
        return;
    }
    method void draw_A(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, -8192);
        do Memory.poke(memAddress +32, -8192);
        do Memory.poke(memAddress +64, -4096);
        do Memory.poke(memAddress +96, -2048);
        do Memory.poke(memAddress +128, -2048);
        do Memory.poke(memAddress +160, 31744);
        do Memory.poke(memAddress +192, 31744);
        do Memory.poke(memAddress +224, 15872);
        do Memory.poke(memAddress +256, 15872);
        do Memory.poke(memAddress +288, 7936);
        do Memory.poke(memAddress +320, 7936);
        do Memory.poke(memAddress +352, 3968);
        do Memory.poke(memAddress +384, 3968);
        do Memory.poke(memAddress +416, 1984);
        do Memory.poke(memAddress +448, 1984);
        do Memory.poke(memAddress +480, 2016);
        do Memory.poke(memAddress +512, 992);
        do Memory.poke(memAddress +544, 496);
        do Memory.poke(memAddress +576, -16);
        do Memory.poke(memAddress +608, -8);
        do Memory.poke(memAddress +640, -4);
        do Memory.poke(memAddress +672, 508);
        do Memory.poke(memAddress +704, 254);
        do Memory.poke(memAddress +736, 126);
        do Memory.poke(memAddress +768, 126);
        do Memory.poke(memAddress +800, 63);
        do Memory.poke(memAddress +832, 31);
        do Memory.poke(memAddress +864, 15);
        do Memory.poke(memAddress +896, 15);
        do Memory.poke(memAddress +928, 7);
        do Memory.poke(memAddress +960, 7);
        do Memory.poke(memAddress +992, 3);
        // column 1
        do Memory.poke(memAddress +1, 3);
        do Memory.poke(memAddress +33, 7);
        do Memory.poke(memAddress +65, 7);
        do Memory.poke(memAddress +97, 15);
        do Memory.poke(memAddress +129, 15);
        do Memory.poke(memAddress +161, 30);
        do Memory.poke(memAddress +193, 62);
        do Memory.poke(memAddress +225, 60);
        do Memory.poke(memAddress +257, 124);
        do Memory.poke(memAddress +289, 120);
        do Memory.poke(memAddress +321, 248);
        do Memory.poke(memAddress +353, 248);
        do Memory.poke(memAddress +385, 496);
        do Memory.poke(memAddress +417, 496);
        do Memory.poke(memAddress +449, 1008);
        do Memory.poke(memAddress +481, 992);
        do Memory.poke(memAddress +513, 2016);
        do Memory.poke(memAddress +545, 2016);
        do Memory.poke(memAddress +577, 2047);
        do Memory.poke(memAddress +609, 4095);
        do Memory.poke(memAddress +641, 4095);
        do Memory.poke(memAddress +673, 8064);
        do Memory.poke(memAddress +705, 7936);
        do Memory.poke(memAddress +737, 16128);
        do Memory.poke(memAddress +769, 15872);
        do Memory.poke(memAddress +801, 15872);
        do Memory.poke(memAddress +833, 31744);
        do Memory.poke(memAddress +865, 31744);
        do Memory.poke(memAddress +897, -2048);
        do Memory.poke(memAddress +929, -2048);
        do Memory.poke(memAddress +961, -4096);
        do Memory.poke(memAddress +993, -4096);
        return;
    }
    method void draw_R(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, -8);
        do Memory.poke(memAddress +32, -4);
        do Memory.poke(memAddress +64, -2);
        do Memory.poke(memAddress +96, -2);
        do Memory.poke(memAddress +128, 15);
        do Memory.poke(memAddress +160, 15);
        do Memory.poke(memAddress +192, 15);
        do Memory.poke(memAddress +224, 15);
        do Memory.poke(memAddress +256, 15);
        do Memory.poke(memAddress +288, 15);
        do Memory.poke(memAddress +320, 15);
        do Memory.poke(memAddress +352, 15);
        do Memory.poke(memAddress +384, 15);
        do Memory.poke(memAddress +416, -1);
        do Memory.poke(memAddress +448, -1);
        do Memory.poke(memAddress +480, -1);
        do Memory.poke(memAddress +512, 2047);
        do Memory.poke(memAddress +544, 8191);
        do Memory.poke(memAddress +576, 16383);
        do Memory.poke(memAddress +608, 32719);
        do Memory.poke(memAddress +640, -113);
        do Memory.poke(memAddress +672, -241);
        do Memory.poke(memAddress +704, -1009);
        do Memory.poke(memAddress +736, -4081);
        do Memory.poke(memAddress +768, -16369);
        do Memory.poke(memAddress +800, -32753);
        do Memory.poke(memAddress +832, 15);
        do Memory.poke(memAddress +864, 15);
        do Memory.poke(memAddress +896, 15);
        do Memory.poke(memAddress +928, 15);
        do Memory.poke(memAddress +960, 15);
        // column 1
        do Memory.poke(memAddress +1, 16383);
        do Memory.poke(memAddress +33, 32767);
        do Memory.poke(memAddress +65, -1);
        do Memory.poke(memAddress +97, -1);
        do Memory.poke(memAddress +129, -4096);
        do Memory.poke(memAddress +161, -4096);
        do Memory.poke(memAddress +193, -4096);
        do Memory.poke(memAddress +225, -4096);
        do Memory.poke(memAddress +257, -4096);
        do Memory.poke(memAddress +289, -4096);
        do Memory.poke(memAddress +321, -4096);
        do Memory.poke(memAddress +353, -4096);
        do Memory.poke(memAddress +385, -2048);
        do Memory.poke(memAddress +417, -1);
        do Memory.poke(memAddress +449, -1);
        do Memory.poke(memAddress +481, -1);
        do Memory.poke(memAddress +641, 1);
        do Memory.poke(memAddress +673, 7);
        do Memory.poke(memAddress +705, 15);
        do Memory.poke(memAddress +737, 31);
        do Memory.poke(memAddress +769, 63);
        do Memory.poke(memAddress +801, 255);
        do Memory.poke(memAddress +833, 511);
        do Memory.poke(memAddress +865, 2046);
        do Memory.poke(memAddress +897, 8188);
        do Memory.poke(memAddress +929, 16376);
        do Memory.poke(memAddress +961, 32736);
        return;
    }
    method void start_menu(){
        var int row;
        var int location;
        var int col;
        var char key;
        let row = 100;
        let col = 70;
        let location = cal_location(row, col);
        do draw_P(location);
        let col = col + 48;
        let location = cal_location(row, col);
        do draw_I(location);
        let col = col + 48;
        let location = cal_location(row, col);
        do draw_X(location);
        let col = col + 48;
        let location = cal_location(row, col);
        do draw_E(location);
        let col = col + 48;
        let location = cal_location(row, col);
        do draw_L(location);
        let col = col + 48;
        let location = cal_location(row, col);
        do draw_W(location);
        let col = col + 48;
        let location = cal_location(row, col);
        do draw_A(location);
        let col = col + 48;
        let location = cal_location(row, col);
        do draw_R(location);
        do Output.moveCursor(15, 23);
        do Output.printString("Press P to Start!");
        while(true){
            let key = Keyboard.keyPressed();
            if(key = 80){
                do Screen.clearScreen();
                return;
            }
        }
        return;
    }
    method int cal_location(int row, int col){
        return ((row*32) + (col/16));
    }
    method void init(int level,int jet_hp,int num_e,int enemy_hp){ 
        var int i;
        var int step;
        var int len;
        let init_hp = jet_hp;
        let num_enemy = num_e;
        let current_enemy = num_enemy;
        let jet = Jet.new(128, 30, jet_hp); // center of the jet
        let len = 256 / (num_enemy + 1); // the distance between enemy
        // init the map????
        // map.init(level);
        // put enemy
        let enemys = Array.new(num_enemy);
        let i = 0;
        let step = 0;
        while(i<num_enemy){
            let step = step + len;
            let enemys[i] = Enemy.new(step, 480, enemy_hp);
            let i = i+1;
        }
        // draw life bar
        do draw_hp_bar(235, 5, jet.get_hp());
        return;
    }
    method int run () {
        var char key;
        var int e_hit_wall;
        var int e_hit;
        var int j_hit;
        var int e_index;
        var int e_row;
        var int e_col;
        // do Output.printString("AAAAAA");
        while(true){
            // do jet_control();
            //do Output.printInt(current_enemy);
            // hit (jet&enemy) & enemy fire
            let e_index = 0;
            while(e_index < num_enemy){
                let enemy = enemys[e_index];
                let e_row = enemy.get_row();
                let e_col = enemy.get_col();
                if(~(enemy.get_hp() = 0)){ // dead
                    // enemy fire
                    do enemy.fire();
                    // jet hit
                    let j_hit = enemy.hit_jet(jet.get_row(), jet.get_col());
                    if(j_hit = 1){
                        do jet.damage();
                    }
                    if((jet.get_hp()) = 0){ // lose
                        do draw_hp_bar(235, 5, 0);
                        return -1;
                    }
                    // enemy hit
                    let e_hit = jet.hit_enemy(e_row, e_col);
                    // do Output.printString("WWWW");
                    // do Output.printInt(e_hit);
                    // do Output.printString("BBBB");
                    if(e_hit = 1){
                        do enemy.damage();
                    }
                    if((enemy.get_hp()) = 0){
                        let current_enemy = current_enemy - 1;
                        do enemy.dead();
                    }
                    if(current_enemy = 0){ // win
                        return 1;
                    }
                }
                do jet_control();
                let e_index = e_index + 1;
            }
            // enemy move
            let e_index = 0;
            while(e_index < num_enemy){
                let enemy = enemys[e_index];
                if(~(enemy.get_hp() = 0)){ // detect hit wall
                    let e_hit_wall = enemy.move();
                    if(e_hit_wall = -1){
                        do jet.damage();
                        do enemy.dead();
                        // do Output.printString("Hit wall");
                        let current_enemy = current_enemy - 1;
                    }
                }
                let e_index = e_index + 1;
            }
            do draw_hp_bar(235, 5, jet.get_hp());
        }
        return -1;
    }
    method void over(int win){
        // clean all memory and data
        // draw some pictures
        do Screen.clearScreen();
        do Output.moveCursor(13, 27);
        if(win = -1){
            do Output.printString("Game over");
            do Sys.wait(3000);
            do print_thanks_list();
            return;
        }
        else{
            do Output.printString("Level Up");
        }
        do Sys.wait(3000);
        do Screen.clearScreen();
        return;
    }

    method void print_thanks_list(){
        // draw all memory and data
        // print out people that we want to thank to
        do Screen.clearScreen();
        do Output.moveCursor(6, 20);
        do Output.printString("Thanks to these people : ");
        do Output.moveCursor(8, 26);
        do Output.printString("Paddy Lee");
        do Output.moveCursor(10, 25);
        do Output.printString("Sealmatt Lee");
        do Output.moveCursor(12, 12);
        do Output.printString("ErikUmble ( the author of JackBitMap editor)");
        do Output.moveCursor(14, 16);
        do Output.printString("Yung-Yu Chuang ( for the lectures )");
        do Sys.wait(8000);
        return;
    }

    method void draw_hp_square(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 16383);
        do Memory.poke(memAddress +32, 16383);
        do Memory.poke(memAddress +64, 16383);
        do Memory.poke(memAddress +96, 16383);
        do Memory.poke(memAddress +128, 16383);
        do Memory.poke(memAddress +160, 16383);
        do Memory.poke(memAddress +192, 16383);
        do Memory.poke(memAddress +224, 16383);
        do Memory.poke(memAddress +256, 16383);
        do Memory.poke(memAddress +288, 16383);
        do Memory.poke(memAddress +320, 16383);
        do Memory.poke(memAddress +352, 16383);
        do Memory.poke(memAddress +384, 16383);
        do Memory.poke(memAddress +416, 16383);
        do Memory.poke(memAddress +448, 16383);
        do Memory.poke(memAddress +480, 16383);
        return;
    }
    method void draw_hp_blank(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
        do Memory.poke(memAddress +480, 0);
        return;
    }
    method void jet_control(){
        var char key;
        let key = Keyboard.keyPressed();
        if(key = 74){ // J, fire
            do jet.fire(true);
        }
        else{
            do jet.fire(false);
        }    
        let key = Keyboard.keyPressed();
        // jet move
        if(key = 87){ // W, move up
            do jet.move_up();
        } 
        if(key = 65){ // A, move left
            do jet.move_left();
        }
        if(key = 83){ // S, move down
            do jet.move_down();
        }
        if(key = 68){ // D, move right
            do jet.move_right();
        }
        return;
    }
    method void draw_hp_bar(int row, int col, int hp){ // leftest position : (235, 5) (row, col)
        var int i;
        var int location;
        let i = 0;
        let location = (row*32) + (col/16);
        while(i < hp){
            do draw_hp_square(location);
            let location = location + 1;
            let i = i + 1;
        }
        while(i < init_hp){
            do draw_hp_blank(location);
            let location = location + 1;
            let i = i + 1;
        }
        return;
    }

}