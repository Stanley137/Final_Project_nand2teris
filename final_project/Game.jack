class Game {
    // attributes and methods
    field Jet jet; // our flight
    field Map map; // map(building、enemy)
    field Enemy enemy;
    field Array enemys;
    field int num_enemy;
    field int current_enemy;
    field int init_hp;
    constructor Game new(){
        return this;
    }
    method void init(int level,int jet_hp,int num_e,int enemy_hp){ 
        var int i;
        var int step;
        var int len;
        let init_hp = jet_hp;
        let num_enemy = num_e;
        let current_enemy = num_enemy;
        let jet = Jet.new(128, 30, jet_hp); // center of the jet
        let len = 256 / (num_enemy + 1); // the distance between enemy
        // init the map????
        // map.init(level);
        // put enemy
        let enemys = Array.new(num_enemy);
        let i = 0;
        let step = 0;
        while(i<num_enemy){
            let step = step + len;
            let enemys[i] = Enemy.new(step, 480, enemy_hp);
            let i = i+1;
        }
        // draw life bar
        do draw_hp_bar(235, 5, jet.get_hp());
        return;
    }
    method int run () {
        var char key;
        var int e_hit_wall;
        var int e_hit;
        var int j_hit;
        var int e_index;
        var int e_row;
        var int e_col;
        // do Output.printString("AAAAAA");
        while(true){
            // do jet_control();
            //do Output.printInt(current_enemy);
            // hit (jet&enemy) & enemy fire
            let e_index = 0;
            while(e_index < num_enemy){
                let enemy = enemys[e_index];
                let e_row = enemy.get_row();
                let e_col = enemy.get_col();
                if(~(enemy.get_hp() = 0)){ // dead
                    // enemy fire
                    do enemy.fire();
                    // jet hit
                    let j_hit = enemy.hit_jet(jet.get_row(), jet.get_col());
                    if(j_hit = 1){
                        do jet.damage();
                    }
                    if((jet.get_hp()) = 0){ // lose
                        do draw_hp_bar(235, 5, 0);
                        return -1;
                    }
                    // enemy hit
                    let e_hit = jet.hit_enemy(e_row, e_col);
                    // do Output.printString("WWWW");
                    // do Output.printInt(e_hit);
                    // do Output.printString("BBBB");
                    if(e_hit = 1){
                        do enemy.damage();
                    }
                    if((enemy.get_hp()) = 0){
                        let current_enemy = current_enemy - 1;
                        do enemy.dead();
                    }
                    if(current_enemy = 0){ // win
                        return 1;
                    }
                }
                do jet_control();
                let e_index = e_index + 1;
            }
            // enemy move
            let e_index = 0;
            while(e_index < num_enemy){
                let enemy = enemys[e_index];
                if(~(enemy.get_hp() = 0)){ // detect hit wall
                    let e_hit_wall = enemy.move();
                    if(e_hit_wall = -1){
                        do jet.damage();
                        do enemy.dead();
                        // do Output.printString("Hit wall");
                        let current_enemy = current_enemy - 1;
                    }
                }
                let e_index = e_index + 1;
            }
            do draw_hp_bar(235, 5, jet.get_hp());
        }
        return -1;
    }
    method void over(int win){
        // clean all memory and data
        // draw some pictures
        do Screen.clearScreen();
        do Output.moveCursor(13, 27);
        if(win = -1){
            do Output.printString("Game over");
            do Sys.wait(3000);
            do print_thanks_list();
        }
        else{
            do Output.printString("Level Up");
        }
        do Sys.wait(3000);
        do Screen.clearScreen();
        return;
    }

    method void print_thanks_list(){
        // draw all memory and data
        // print out people that we want to thank to
        do Screen.clearScreen();
        do Output.moveCursor(10, 20);
        do Output.printString("Thanks to these people : ");
        do Output.moveCursor(11, 26);
        do Output.printString("Padde Lee");
        do Output.moveCursor(12, 25);
        do Output.printString("Sealmatt Lee");
        do Output.moveCursor(13, 12);
        do Output.printString("ErikUmble ( the author of JackBitMap editor)");
        do Output.moveCursor(14, 16);
        do Output.printString("Yung-Yu Chuang ( for the lectures )");
        do Sys.wait(8000);
        return;
    }

    method void draw_hp_square(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 16383);
        do Memory.poke(memAddress +32, 16383);
        do Memory.poke(memAddress +64, 16383);
        do Memory.poke(memAddress +96, 16383);
        do Memory.poke(memAddress +128, 16383);
        do Memory.poke(memAddress +160, 16383);
        do Memory.poke(memAddress +192, 16383);
        do Memory.poke(memAddress +224, 16383);
        do Memory.poke(memAddress +256, 16383);
        do Memory.poke(memAddress +288, 16383);
        do Memory.poke(memAddress +320, 16383);
        do Memory.poke(memAddress +352, 16383);
        do Memory.poke(memAddress +384, 16383);
        do Memory.poke(memAddress +416, 16383);
        do Memory.poke(memAddress +448, 16383);
        do Memory.poke(memAddress +480, 16383);
        return;
    }
    method void draw_hp_blank(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
        do Memory.poke(memAddress +480, 0);
        return;
    }
    method void jet_control(){
        var char key;
        let key = Keyboard.keyPressed();
        if(key = 74){ // J, fire
            do jet.fire(true);
        }
        else{
            do jet.fire(false);
        }    
        let key = Keyboard.keyPressed();
        // jet move
        if(key = 87){ // W, move up
            do jet.move_up();
        } 
        if(key = 65){ // A, move left
            do jet.move_left();
        }
        if(key = 83){ // S, move down
            do jet.move_down();
        }
        if(key = 68){ // D, move right
            do jet.move_right();
        }
        return;
    }
    method void draw_hp_bar(int row, int col, int hp){ // leftest position : (235, 5) (row, col)
        var int i;
        var int location;
        let i = 0;
        let location = (row*32) + (col/16);
        while(i < hp){
            do draw_hp_square(location);
            let location = location + 1;
            let i = i + 1;
        }
        while(i < init_hp){
            do draw_hp_blank(location);
            let location = location + 1;
            let i = i + 1;
        }
        return;
    }

}